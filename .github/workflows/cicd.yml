name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:


jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:bullseye
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U $${POSTGRES_USER} -d ${POSTGRES_DB}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      - name: Create virtual environment
        run: python -m venv .venv

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-py-3.13
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          .venv/bin/python -m pip install --upgrade pip --quiet
          .venv/bin/python -m pip install -r requirements.txt --quiet

      - name: Check PostgreSQL container health
        shell: bash
        run: |
          echo "Checking PostgresSQL container health..."
          for i in {1..10}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' $(docker ps -q --filter expose=5432))
            echo "Health status: $STATUS"
            if [ "$STATUS" == "healthy" ]; then
              echo "PostgreSQL is healthy."
              break
            fi
            echo "Waiting for PostgreSQL to become healthy..."
            sleep 3
          done          
          if [ "$STATUS" != "healthy" ]; then
            echo "PostgreSQL container failed to become healthy."
            exit 1
          fi

      - name: Initialize test database schema
        env:
          PGPASSWORD: testpassword
          DATABASE_USERNAME: testuser
          DATABASE_NAME: testdb
          DATABASE_HOST: localhost
        run: |
          psql -h "$DATABASE_HOST" -U "$DATABASE_USERNAME" -d "$DATABASE_NAME" <<-EOF
            CREATE TABLE IF NOT EXISTS users (
              id SERIAL PRIMARY KEY,
              email VARCHAR(255) UNIQUE NOT NULL,
              password_hash VARCHAR(255) NOT NULL
            );
          EOF
        shell: bash

      - name: Run tests
        env:
          DATABASE_HOST: postgres
          DATABASE_PORT: 5432
          DATABASE_NAME: testdb
          DATABASE_USERNAME: testuser
          DATABASE_URL: postgresql://testuser:testpassword@postgres:5432/testdb
        shell: bash
        run: |
          source .venv/bin/activate
          pytest tests/

      - name: Build Docker image
        run: |
          docker build --build-arg REQ_FILE=requirements-prod.txt \
          --cache-from=type=gha \
          -t flask-app .

  deploy:
    name: Deploy to EC2
    needs: build-test
    runs-on: ubuntu-latest

    steps:
      - name: Install SSH client
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends openssh-client

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: SSH and deploy
        shell: bash
        run: |
          timeout 120s ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          set -e
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"          
          cd ${{ secrets.DEPLOY_DIR }}
          git fetch origin main
          git reset --hard origin/main        
          chmod +x entrypoint.sh
          docker compose --env-file .env.production down --remove-orphans
          docker compose --env-file .env.production build --no-cache
          docker compose --env-file .env.production up --pull always -d        
          EOF
